<!DOCTYPE html>
<html>
<head>
<meta name="viewport" content="initial-scale=1.0, user-scalable=no" />
<style type="text/css">
  html { height: 100% }
  body { height: 100%; margin: 0px; padding: 0px }
  #map_canvas { height: 100% }
</style>
<script type="text/javascript" src="https://maps.google.com/maps/api/js?sensor=false"></script>
<script type='text/javascript' charset="utf-8" src='js/jquery-1.4.2.min.js'></script>
<script>
      var directionDisplay;
      var directionsService = new google.maps.DirectionsService();
      var map;
      var geocoder;
      var start;
      var startposition = null;
      var end;
      var endposition = null;
      var stepDisplay;
      var markerArray = [];
      var id;
      var marker1 = null;
      var marker2 = null;
      var polyline = null;
      var segmentArray = [];


    function initialize() {

        geocoder = new google.maps.Geocoder();
        directionsDisplay = new google.maps.DirectionsRenderer();

        var chicago = new google.maps.LatLng(41.850033, -87.6500523);
        var mapOptions = {
        zoom:13,
        mapTypeId: google.maps.MapTypeId.ROADMAP,
        center: chicago
        }
        map = new google.maps.Map(document.getElementById('map_canvas'), mapOptions);

        var rendererOptions = {
            map: map
        }
        directionsDisplay = new google.maps.DirectionsRenderer(rendererOptions)
        stepDisplay = new google.maps.InfoWindow();

    }


  function codeAddress(address, num) {

    if(polyline)
    {
    polyline.setMap(null);
    }

    if(num == 1)
    {
        start = address;

        if(marker1)
        {
            marker1.setMap(null);
        }

        geocoder.geocode( { 'address': address}, function(results, status) {
            if (status == google.maps.GeocoderStatus.OK)
            {

                map.setCenter(results[0].geometry.location);
                startposition = results[0].geometry.location;
                marker1 = new google.maps.Marker({
                    map: map,
                    position: results[0].geometry.location,
                    animation: google.maps.Animation.DROP
                    });
                markersArray.push(marker);
            }
            else
            {
              alert('Geocode was not successful for the following reason: ' + status);
            }
      });
  }
  else
  {
    end = address;

    if(marker2)
    {
         marker2.setMap(null);
    }
    geocoder.geocode( { 'address': address}, function(results, status) {
        if (status == google.maps.GeocoderStatus.OK) {
            map.setCenter(results[0].geometry.location);
            endposition = results[0].geometry.location;
            marker2 = new google.maps.Marker({
                map: map,
                position: results[0].geometry.location
        });
        markersArray.push(marker);
        }
        else
        {
            alert('Geocode was not successful for the following reason: ' + status);
        }
    });
    }

}

      function calcRoute() {

       polyline = new google.maps.Polyline({
                path: [],
                strokeColor: '#FF0000',
                strokeWeight: 3
                });

        for (i = 0; i < markerArray.length; i++) {
          markerArray[i].setMap(null);
        }
        markerArray = [];

        if (startposition == null || endposition == null)
        {
        alert("set position");
        }

        var request = {
            origin: startposition,
            destination: endposition,
            travelMode: google.maps.DirectionsTravelMode.WALKING
        };
        directionsService.route(request, function(response, status) {
          if (status == google.maps.DirectionsStatus.OK) {

          alert("found path");

          var bounds = new google.maps.LatLngBounds();
          var path = response.routes[0].overview_path;
          var legs = response.routes[0].legs;

          for (i=0;i<legs.length;i++)
          {
              var steps = legs[i].steps;
              for (j=0;j<steps.length;j++) {
                  var nextSegment = steps[j].path;
                  for (k=0;k<nextSegment.length;k++) {
                      polyline.getPath().push(nextSegment[k]);
                      bounds.extend(nextSegment[k]);
                      segmentArray.push(nextSegment[k]);
                  }
              }
          }
             map.fitBounds(bounds);
             polyline.setMap(map);//폴리라인으로 보기
             //directionsDisplay.setDirections(response);//다이렉션으로 보기
            //showSteps(response);//스탭 마커로 표시하기


            for(i=0; i<segmentArray.length; i++)
            {
            //alert(segmentArray[i]);
           // reverse(segmentArray[i]);
            }
            //alert(segmentArray[2]);


          }
          else
          {
          alert("not found path");
          }
        });
      }


      function showSteps(directionResult) {
        var myRoute = directionResult.routes[0].legs[0];

        for (var i = 0; i < myRoute.steps.length; i++) {
          var marker = new google.maps.Marker({
            position: myRoute.steps[i].start_point,
            map: map
          });
          attachInstructionText(marker, myRoute.steps[i].instructions);
          markerArray[i] = marker;
        }
      }

      function attachInstructionText(marker, text) {
        google.maps.event.addListener(marker, 'click', function() {
          stepDisplay.setContent(text);
          stepDisplay.open(map, marker);
        });
      }

        function reverse(latlng)
        {
        var infowindow = new google.maps.InfoWindow();
        var marker;
        var geocoder = new google.maps.Geocoder();
        geocoder.geocode({'latLng': latlng}, function(results, status) {
                 if (status == google.maps.GeocoderStatus.OK) {
                   if (results[1]) {
                     map.setZoom(11);
                     marker = new google.maps.Marker({
                         position: latlng,
                         map: map
                     });
                     infowindow.setContent(results[1].formatted_address);
                     infowindow.open(map, marker);
                   } else {
                     alert('No results found');
                   }
                 } else {
                   alert('Geocoder failed due to: ' + status);
                 }
               });
          }

  </script>
  </head>
  <body onload="initialize()">
    <div id="map_canvas"></div>
    <div id="end" value="260 Broadway New York NY 10007"></div>
     <div id="start" value="penn station, new york, ny"></div>


                <script type="text/javascript">

                  var _gaq = _gaq || [];
                  _gaq.push(['_setAccount', 'UA-17413393-1']);
                  _gaq.push(['_trackPageview']);

                  (function() {
                    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
                    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
                    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
                  })();

                </script>

  </body>
</html>
